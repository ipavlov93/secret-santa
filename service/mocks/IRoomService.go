// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	model "secret-santa/model"

	mock "github.com/stretchr/testify/mock"
)

// IRoomService is an autogenerated mock type for the IRoomService type
type IRoomService struct {
	mock.Mock
}

// CreateRoom provides a mock function with given fields: ownerKey
func (_m *IRoomService) CreateRoom(ownerKey string) (string, error) {
	ret := _m.Called(ownerKey)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(ownerKey)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(ownerKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ownerKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JoinRoom provides a mock function with given fields: roomKey, partnerKeys
func (_m *IRoomService) JoinRoom(roomKey string, partnerKeys ...string) error {
	_va := make([]interface{}, len(partnerKeys))
	for _i := range partnerKeys {
		_va[_i] = partnerKeys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, roomKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...string) error); ok {
		r0 = rf(roomKey, partnerKeys...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LeftRoom provides a mock function with given fields: roomKey, partnerKey
func (_m *IRoomService) LeftRoom(roomKey string, partnerKey string) error {
	ret := _m.Called(roomKey, partnerKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(roomKey, partnerKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Roll provides a mock function with given fields: roomKey
func (_m *IRoomService) Roll(roomKey string) (model.RollResult, error) {
	ret := _m.Called(roomKey)

	var r0 model.RollResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.RollResult, error)); ok {
		return rf(roomKey)
	}
	if rf, ok := ret.Get(0).(func(string) model.RollResult); ok {
		r0 = rf(roomKey)
	} else {
		r0 = ret.Get(0).(model.RollResult)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roomKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIRoomService creates a new instance of IRoomService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRoomService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRoomService {
	mock := &IRoomService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
